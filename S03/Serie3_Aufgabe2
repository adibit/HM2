import sympy as sp
import numpy as np

#a
x, y = sp.symbols (' x y ')
f1 = x**2/186**2 - y**2/(300**2-186**2) - 1
f2 = (y-500)**2/279**2 - (x-300)**2/(500**2 - 279**2) - 1
etol = 10**-5
x0 = [np.array([[-1300], [1700]]),
      np.array([[700], [900]]),
      np.array([[250], [150]]),
      np.array([[-200], [10]])]

def aufgabe2a(f1, f2, x, y):
    p1= sp.plot_implicit (sp.Eq( f1 , 0 ) , ( x , -2000 ,2000) , ( y , -2000 ,2000))
    p2= sp.plot_implicit (sp.Eq( f2 , 0 ) , ( x , -2000 ,2000) , ( y , -2000 ,2000))
    p1.append(p2[0])
    p1.show( )


#b
def aufgabe2b(f,x0,x,y):
    Df = f.jacobian([x, y])

    Df = sp.lambdify([([x], [y])], Df, 'numpy')
    fl = sp.lambdify([([x], [y])], f, 'numpy')
    x = [x0]
    k = 0
    while np.linalg.norm(fl(x[k]), 2) >= etol:
        d = np.linalg.solve(Df(x[k]), -fl(x[k]))
        x.append(x[k] + d)
        k += 1
    return x

f = sp.Matrix([f1, f2])
for s in x0:
    print("S: ", s.T)
    xn = aufgabe2b(f, s, x, y)
    for k in range(1, len(xn)):
        print(k, " x = ", xn[k].T)